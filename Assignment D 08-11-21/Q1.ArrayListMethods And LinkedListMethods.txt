Linked List:-
There’s a variety of built-in methods that you can use when working with your linked list. As you can see, the above program demonstrates the use of a lot of basic methods whose functionality I have specified below:

add(E e) – This method adds elements to the linked list one after the other
add​(int index, E element)  – This method adds the specified element at the specified position in this list
addFirst(E e) – This method adds the specified element at the beginning of this list
addLast​(E e) –  This method adds the specified element to the end of this list
get​(int index): This method returns the element at the specified position in this list
set​(int index, E element): This method replaces the element at the specified position in this list with the specified element
remove​(int index): This method removes the element at the specified position in this list
removeFirst​(): This method removes and returns the first element from this list
removeLast​(): This method removes and returns the last element from this list
Apart from these, there are a lot of other methods that you can use when working with the LinkedList class. Let’s explore a few more.

ArrayList Methods:-
void add(int index, E element)	:-It is used to insert the specified element at the specified position in a list.
boolean add(E e):-	It is used to append the specified element at the end of a list.
boolean addAll(Collection<? extends E> c):-	It is used to append all of the elements in the specified collection to the end of this list, in the order 						that they are returned by the specified collection's iterator.
boolean addAll(int index, Collection<? extends E> c):-	It is used to append all the elements in the specified collection, starting at the specified 							position of the list.
void clear():-	It is used to remove all of the elements from this list.
void ensureCapacity(int requiredCapacity):-	It is used to enhance the capacity of an ArrayList instance.
E get(int index):-	It is used to fetch the element from the particular position of the list.
boolean isEmpty():-	It returns true if the list is empty, otherwise false.
Iterator():-	
listIterator():-
int lastIndexOf(Object o):-It is used to return the index in this list of the last occurrence of the specified element, or -1 if the list does not contain 				this element.
Object[] toArray():-	It is used to return an array containing all of the elements in this list in the correct order.
<T> T[] toArray(T[] a):-	It is used to return an array containing all of the elements in this list in the correct order.
Object clone():-	It is used to return a shallow copy of an ArrayList.
boolean contains(Object o):-	It returns true if the list contains the specified element
int indexOf(Object o):-	It is used to return the index in this list of the first occurrence of the specified element, or -1 if the List does not contain 			this element.
E remove(int index):-	It is used to remove the element present at the specified position in the list.
boolean remove(Object o):-	It is used to remove the first occurrence of the specified element.
boolean removeAll(Collection<?> c):-	It is used to remove all the elements from the list.
boolean removeIf(Predicate<? super E> filter):-	It is used to remove all the elements from the list that satisfies the given predicate.
protected void removeRange(int fromIndex, int toIndex):-	It is used to remove all the elements lies within the given range.
void replaceAll(UnaryOperator<E> operator):-	It is used to replace all the elements from the list with the specified element.
void retainAll(Collection<?> c)	:-It is used to retain all the elements in the list that are present in the specified collection.
E set(int index, E element):-	It is used to replace the specified element in the list, present at the specified position.
void sort(Comparator<? super E> c):-	It is used to sort the elements of the list on the basis of specified comparator.
Spliterator<E> spliterator():-	It is used to create spliterator over the elements in a list.
List<E> subList(int fromIndex, int toIndex):-	It is used to fetch all the elements lies within the given range.
int size():-It is used to return the number of elements present in the list.	
void trimToSize():-	It is used to trim the capacity of this ArrayList instance to be the list's current size.